// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cunxun.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	cunxun.proto

It has these top-level messages:
	CreateColumnReq
	UpdateColumnReq
	DeleteColumnReq
	DeleteColumnResp
	Column
	ColumnList
	CreateArticleReq
	UpdateArticleReq
	DeleteArticleReq
	GetAllColumnReq
	DeleteArticleResp
	Article
	ArticleList
	GetArticlesOfColumnReq
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateColumnReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CreateColumnReq) Reset()                    { *m = CreateColumnReq{} }
func (m *CreateColumnReq) String() string            { return proto.CompactTextString(m) }
func (*CreateColumnReq) ProtoMessage()               {}
func (*CreateColumnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateColumnReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateColumnReq struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *UpdateColumnReq) Reset()                    { *m = UpdateColumnReq{} }
func (m *UpdateColumnReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateColumnReq) ProtoMessage()               {}
func (*UpdateColumnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdateColumnReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateColumnReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteColumnReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteColumnReq) Reset()                    { *m = DeleteColumnReq{} }
func (m *DeleteColumnReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteColumnReq) ProtoMessage()               {}
func (*DeleteColumnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteColumnReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteColumnResp struct {
}

func (m *DeleteColumnResp) Reset()                    { *m = DeleteColumnResp{} }
func (m *DeleteColumnResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteColumnResp) ProtoMessage()               {}
func (*DeleteColumnResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Column struct {
	Id         int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CreatedAt  int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt  int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	CreaterUid int32  `protobuf:"varint,5,opt,name=creater_uid,json=createrUid" json:"creater_uid,omitempty"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Column) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Column) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Column) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Column) GetCreaterUid() int32 {
	if m != nil {
		return m.CreaterUid
	}
	return 0
}

type ColumnList struct {
	Items []*Column `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ColumnList) Reset()                    { *m = ColumnList{} }
func (m *ColumnList) String() string            { return proto.CompactTextString(m) }
func (*ColumnList) ProtoMessage()               {}
func (*ColumnList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ColumnList) GetItems() []*Column {
	if m != nil {
		return m.Items
	}
	return nil
}

type CreateArticleReq struct {
	ColumnId int32  `protobuf:"varint,1,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content  string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
}

func (m *CreateArticleReq) Reset()                    { *m = CreateArticleReq{} }
func (m *CreateArticleReq) String() string            { return proto.CompactTextString(m) }
func (*CreateArticleReq) ProtoMessage()               {}
func (*CreateArticleReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateArticleReq) GetColumnId() int32 {
	if m != nil {
		return m.ColumnId
	}
	return 0
}

func (m *CreateArticleReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateArticleReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type UpdateArticleReq struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ColumnId int32  `protobuf:"varint,2,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
}

func (m *UpdateArticleReq) Reset()                    { *m = UpdateArticleReq{} }
func (m *UpdateArticleReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateArticleReq) ProtoMessage()               {}
func (*UpdateArticleReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateArticleReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateArticleReq) GetColumnId() int32 {
	if m != nil {
		return m.ColumnId
	}
	return 0
}

func (m *UpdateArticleReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateArticleReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type DeleteArticleReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteArticleReq) Reset()                    { *m = DeleteArticleReq{} }
func (m *DeleteArticleReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteArticleReq) ProtoMessage()               {}
func (*DeleteArticleReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteArticleReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetAllColumnReq struct {
}

func (m *GetAllColumnReq) Reset()                    { *m = GetAllColumnReq{} }
func (m *GetAllColumnReq) String() string            { return proto.CompactTextString(m) }
func (*GetAllColumnReq) ProtoMessage()               {}
func (*GetAllColumnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DeleteArticleResp struct {
}

func (m *DeleteArticleResp) Reset()                    { *m = DeleteArticleResp{} }
func (m *DeleteArticleResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteArticleResp) ProtoMessage()               {}
func (*DeleteArticleResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Article struct {
	Id         int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CreatedAt  int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt  int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	ColumnId   int32  `protobuf:"varint,4,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	Title      string `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Content    string `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	CreaterUid int32  `protobuf:"varint,7,opt,name=creater_uid,json=createrUid" json:"creater_uid,omitempty"`
	UpdaterUid int32  `protobuf:"varint,8,opt,name=updater_uid,json=updaterUid" json:"updater_uid,omitempty"`
}

func (m *Article) Reset()                    { *m = Article{} }
func (m *Article) String() string            { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()               {}
func (*Article) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Article) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Article) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Article) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Article) GetColumnId() int32 {
	if m != nil {
		return m.ColumnId
	}
	return 0
}

func (m *Article) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Article) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Article) GetCreaterUid() int32 {
	if m != nil {
		return m.CreaterUid
	}
	return 0
}

func (m *Article) GetUpdaterUid() int32 {
	if m != nil {
		return m.UpdaterUid
	}
	return 0
}

type ArticleList struct {
	Items []*Article `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ArticleList) Reset()                    { *m = ArticleList{} }
func (m *ArticleList) String() string            { return proto.CompactTextString(m) }
func (*ArticleList) ProtoMessage()               {}
func (*ArticleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ArticleList) GetItems() []*Article {
	if m != nil {
		return m.Items
	}
	return nil
}

type GetArticlesOfColumnReq struct {
	ColumnId int32 `protobuf:"varint,1,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
}

func (m *GetArticlesOfColumnReq) Reset()                    { *m = GetArticlesOfColumnReq{} }
func (m *GetArticlesOfColumnReq) String() string            { return proto.CompactTextString(m) }
func (*GetArticlesOfColumnReq) ProtoMessage()               {}
func (*GetArticlesOfColumnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetArticlesOfColumnReq) GetColumnId() int32 {
	if m != nil {
		return m.ColumnId
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateColumnReq)(nil), "pb.CreateColumnReq")
	proto.RegisterType((*UpdateColumnReq)(nil), "pb.UpdateColumnReq")
	proto.RegisterType((*DeleteColumnReq)(nil), "pb.DeleteColumnReq")
	proto.RegisterType((*DeleteColumnResp)(nil), "pb.DeleteColumnResp")
	proto.RegisterType((*Column)(nil), "pb.Column")
	proto.RegisterType((*ColumnList)(nil), "pb.ColumnList")
	proto.RegisterType((*CreateArticleReq)(nil), "pb.CreateArticleReq")
	proto.RegisterType((*UpdateArticleReq)(nil), "pb.UpdateArticleReq")
	proto.RegisterType((*DeleteArticleReq)(nil), "pb.DeleteArticleReq")
	proto.RegisterType((*GetAllColumnReq)(nil), "pb.GetAllColumnReq")
	proto.RegisterType((*DeleteArticleResp)(nil), "pb.DeleteArticleResp")
	proto.RegisterType((*Article)(nil), "pb.Article")
	proto.RegisterType((*ArticleList)(nil), "pb.ArticleList")
	proto.RegisterType((*GetArticlesOfColumnReq)(nil), "pb.GetArticlesOfColumnReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cunxun service

type CunxunClient interface {
	// 创建分类
	CreateColumn(ctx context.Context, in *CreateColumnReq, opts ...grpc.CallOption) (*Column, error)
	// 更新分类
	UpdateColumn(ctx context.Context, in *UpdateColumnReq, opts ...grpc.CallOption) (*Column, error)
	// 删除分类
	DeleteColumn(ctx context.Context, in *DeleteColumnReq, opts ...grpc.CallOption) (*DeleteColumnResp, error)
	// 获取所有分类
	GetAllColumn(ctx context.Context, in *GetAllColumnReq, opts ...grpc.CallOption) (*ColumnList, error)
	// 创建文章
	CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*Article, error)
	// 更新文章
	UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*Article, error)
	// 删除文章
	DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleResp, error)
	// 获取栏目文章
	GetArticlesOfColumn(ctx context.Context, in *GetArticlesOfColumnReq, opts ...grpc.CallOption) (*ArticleList, error)
}

type cunxunClient struct {
	cc *grpc.ClientConn
}

func NewCunxunClient(cc *grpc.ClientConn) CunxunClient {
	return &cunxunClient{cc}
}

func (c *cunxunClient) CreateColumn(ctx context.Context, in *CreateColumnReq, opts ...grpc.CallOption) (*Column, error) {
	out := new(Column)
	err := grpc.Invoke(ctx, "/pb.Cunxun/CreateColumn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cunxunClient) UpdateColumn(ctx context.Context, in *UpdateColumnReq, opts ...grpc.CallOption) (*Column, error) {
	out := new(Column)
	err := grpc.Invoke(ctx, "/pb.Cunxun/UpdateColumn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cunxunClient) DeleteColumn(ctx context.Context, in *DeleteColumnReq, opts ...grpc.CallOption) (*DeleteColumnResp, error) {
	out := new(DeleteColumnResp)
	err := grpc.Invoke(ctx, "/pb.Cunxun/DeleteColumn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cunxunClient) GetAllColumn(ctx context.Context, in *GetAllColumnReq, opts ...grpc.CallOption) (*ColumnList, error) {
	out := new(ColumnList)
	err := grpc.Invoke(ctx, "/pb.Cunxun/GetAllColumn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cunxunClient) CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := grpc.Invoke(ctx, "/pb.Cunxun/CreateArticle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cunxunClient) UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := grpc.Invoke(ctx, "/pb.Cunxun/UpdateArticle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cunxunClient) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleResp, error) {
	out := new(DeleteArticleResp)
	err := grpc.Invoke(ctx, "/pb.Cunxun/DeleteArticle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cunxunClient) GetArticlesOfColumn(ctx context.Context, in *GetArticlesOfColumnReq, opts ...grpc.CallOption) (*ArticleList, error) {
	out := new(ArticleList)
	err := grpc.Invoke(ctx, "/pb.Cunxun/GetArticlesOfColumn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cunxun service

type CunxunServer interface {
	// 创建分类
	CreateColumn(context.Context, *CreateColumnReq) (*Column, error)
	// 更新分类
	UpdateColumn(context.Context, *UpdateColumnReq) (*Column, error)
	// 删除分类
	DeleteColumn(context.Context, *DeleteColumnReq) (*DeleteColumnResp, error)
	// 获取所有分类
	GetAllColumn(context.Context, *GetAllColumnReq) (*ColumnList, error)
	// 创建文章
	CreateArticle(context.Context, *CreateArticleReq) (*Article, error)
	// 更新文章
	UpdateArticle(context.Context, *UpdateArticleReq) (*Article, error)
	// 删除文章
	DeleteArticle(context.Context, *DeleteArticleReq) (*DeleteArticleResp, error)
	// 获取栏目文章
	GetArticlesOfColumn(context.Context, *GetArticlesOfColumnReq) (*ArticleList, error)
}

func RegisterCunxunServer(s *grpc.Server, srv CunxunServer) {
	s.RegisterService(&_Cunxun_serviceDesc, srv)
}

func _Cunxun_CreateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CunxunServer).CreateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cunxun/CreateColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CunxunServer).CreateColumn(ctx, req.(*CreateColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cunxun_UpdateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CunxunServer).UpdateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cunxun/UpdateColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CunxunServer).UpdateColumn(ctx, req.(*UpdateColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cunxun_DeleteColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CunxunServer).DeleteColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cunxun/DeleteColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CunxunServer).DeleteColumn(ctx, req.(*DeleteColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cunxun_GetAllColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CunxunServer).GetAllColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cunxun/GetAllColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CunxunServer).GetAllColumn(ctx, req.(*GetAllColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cunxun_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CunxunServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cunxun/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CunxunServer).CreateArticle(ctx, req.(*CreateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cunxun_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CunxunServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cunxun/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CunxunServer).UpdateArticle(ctx, req.(*UpdateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cunxun_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CunxunServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cunxun/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CunxunServer).DeleteArticle(ctx, req.(*DeleteArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cunxun_GetArticlesOfColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticlesOfColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CunxunServer).GetArticlesOfColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cunxun/GetArticlesOfColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CunxunServer).GetArticlesOfColumn(ctx, req.(*GetArticlesOfColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cunxun_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Cunxun",
	HandlerType: (*CunxunServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateColumn",
			Handler:    _Cunxun_CreateColumn_Handler,
		},
		{
			MethodName: "UpdateColumn",
			Handler:    _Cunxun_UpdateColumn_Handler,
		},
		{
			MethodName: "DeleteColumn",
			Handler:    _Cunxun_DeleteColumn_Handler,
		},
		{
			MethodName: "GetAllColumn",
			Handler:    _Cunxun_GetAllColumn_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _Cunxun_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _Cunxun_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _Cunxun_DeleteArticle_Handler,
		},
		{
			MethodName: "GetArticlesOfColumn",
			Handler:    _Cunxun_GetArticlesOfColumn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cunxun.proto",
}

func init() { proto.RegisterFile("cunxun.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xd1, 0x8a, 0xda, 0x40,
	0x14, 0x35, 0x89, 0xd1, 0xf5, 0xea, 0x6e, 0xdc, 0xd1, 0x16, 0x49, 0x29, 0x75, 0x07, 0x0a, 0xfb,
	0x24, 0xed, 0xb6, 0x3e, 0x15, 0x0a, 0xe2, 0x42, 0x29, 0x14, 0x0a, 0x81, 0x7d, 0x16, 0x4d, 0xa6,
	0x10, 0x88, 0x49, 0x9a, 0x4c, 0xa0, 0xff, 0xd0, 0xdf, 0xeb, 0x37, 0xf4, 0x3b, 0x4a, 0xe6, 0x4e,
	0xcc, 0xcc, 0xb8, 0xf1, 0xa9, 0x6f, 0xe6, 0xce, 0x3d, 0x9c, 0x7b, 0xee, 0x3d, 0x47, 0x98, 0x84,
	0x55, 0xfa, 0xab, 0x4a, 0x57, 0x79, 0x91, 0xf1, 0x8c, 0xd8, 0xf9, 0x81, 0xbe, 0x05, 0x6f, 0x5b,
	0xb0, 0x3d, 0x67, 0xdb, 0x2c, 0xa9, 0x8e, 0x69, 0xc0, 0x7e, 0x12, 0x02, 0xfd, 0x74, 0x7f, 0x64,
	0x0b, 0x6b, 0x69, 0xdd, 0x8f, 0x02, 0xf1, 0x9b, 0xae, 0xc1, 0x7b, 0xca, 0x23, 0xad, 0xed, 0x06,
	0xec, 0x38, 0x12, 0x4d, 0x6e, 0x60, 0xc7, 0xd1, 0x09, 0x66, 0x2b, 0xb0, 0x3b, 0xf0, 0x1e, 0x59,
	0xc2, 0x2e, 0xc0, 0x28, 0x81, 0xa9, 0xde, 0x52, 0xe6, 0xf4, 0xb7, 0x05, 0x03, 0xfc, 0x3c, 0x63,
	0x79, 0x0d, 0x10, 0x8a, 0x79, 0xa3, 0xdd, 0x9e, 0x0b, 0x2e, 0x27, 0x18, 0xc9, 0xca, 0x86, 0xd7,
	0xcf, 0x95, 0x98, 0x53, 0x3c, 0x3b, 0xf8, 0x2c, 0x2b, 0x1b, 0x7e, 0x9a, 0xb1, 0xdf, 0xce, 0x48,
	0xde, 0xc0, 0x18, 0xf1, 0xc5, 0xae, 0x8a, 0xa3, 0x85, 0x2b, 0xa8, 0x24, 0x49, 0xf1, 0x14, 0x47,
	0x74, 0x05, 0x80, 0xc3, 0x7c, 0x8b, 0x4b, 0x4e, 0x96, 0xe0, 0xc6, 0x9c, 0x1d, 0xcb, 0x85, 0xb5,
	0x74, 0xee, 0xc7, 0x0f, 0xb0, 0xca, 0x0f, 0x2b, 0x39, 0x3a, 0x3e, 0xd0, 0x1d, 0x4c, 0x71, 0xa5,
	0x9b, 0x82, 0xc7, 0x61, 0xc2, 0x6a, 0xd5, 0xaf, 0x60, 0x14, 0x8a, 0xa6, 0xdd, 0x49, 0xcd, 0x15,
	0x16, 0xbe, 0x46, 0x64, 0x0e, 0x2e, 0x8f, 0x79, 0xd2, 0xac, 0x0e, 0x3f, 0xc8, 0x02, 0x86, 0x61,
	0x96, 0x72, 0x96, 0xa2, 0x8e, 0x51, 0xd0, 0x7c, 0xd2, 0x0c, 0xa6, 0x78, 0x0c, 0x85, 0xc0, 0xdc,
	0x93, 0x46, 0x68, 0x77, 0x11, 0x3a, 0x1d, 0x84, 0x7d, 0x9d, 0x90, 0x36, 0x37, 0xea, 0x26, 0xa4,
	0xb7, 0xe0, 0x7d, 0x61, 0x7c, 0x93, 0x24, 0xa7, 0x53, 0xd3, 0x19, 0xdc, 0x1a, 0xb0, 0x32, 0xa7,
	0x7f, 0x2d, 0x18, 0xca, 0xef, 0xff, 0x7c, 0x5c, 0x4d, 0x72, 0xbf, 0x4b, 0xb2, 0xdb, 0x21, 0x79,
	0xa0, 0x49, 0x36, 0x5d, 0x31, 0x34, 0x5d, 0x51, 0x37, 0x20, 0x35, 0x36, 0x5c, 0x61, 0x83, 0x2c,
	0xd5, 0xb6, 0x79, 0x07, 0x63, 0xa9, 0x53, 0xf8, 0xe6, 0x4e, 0xf7, 0xcd, 0xb8, 0xf6, 0x4d, 0xb3,
	0x17, 0x69, 0x9c, 0x35, 0xbc, 0xac, 0x57, 0x88, 0xc5, 0xf2, 0xfb, 0x8f, 0x36, 0x34, 0x97, 0xec,
	0xf3, 0xf0, 0xc7, 0x81, 0xc1, 0x56, 0xe4, 0x9a, 0xbc, 0x87, 0x89, 0x9a, 0x66, 0x32, 0x13, 0xee,
	0xd4, 0xf3, 0xed, 0x2b, 0x96, 0xa5, 0xbd, 0x1a, 0xa2, 0x26, 0x1b, 0x21, 0x46, 0xd6, 0x0d, 0xc8,
	0x27, 0x98, 0xa8, 0x91, 0x45, 0x88, 0x91, 0x73, 0x7f, 0x7e, 0x5e, 0x2c, 0x73, 0xda, 0x23, 0x6b,
	0x98, 0xa8, 0x3e, 0x41, 0xb0, 0xe1, 0x1c, 0xff, 0xa6, 0xe5, 0xab, 0x97, 0x47, 0x7b, 0xe4, 0x23,
	0x5c, 0x6b, 0xa1, 0x22, 0xf3, 0x56, 0x5a, 0xeb, 0x4a, 0x5f, 0x5d, 0x2b, 0xa2, 0xb4, 0xa4, 0x20,
	0xca, 0x0c, 0x8f, 0x89, 0xfa, 0x0c, 0xd7, 0x9a, 0x6f, 0x89, 0xa2, 0x45, 0x41, 0xbd, 0x78, 0xa6,
	0x2a, 0x24, 0x3e, 0xc2, 0xec, 0x99, 0x3b, 0x12, 0xbf, 0x51, 0x7a, 0x7e, 0x60, 0xdf, 0x53, 0x26,
	0x40, 0xc5, 0x87, 0x81, 0xf8, 0x93, 0xfe, 0xf0, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xd9, 0x64,
	0x87, 0xb4, 0x05, 0x00, 0x00,
}
